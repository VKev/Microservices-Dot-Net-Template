name: Build and Push Microservices to ECR

on:
  workflow_dispatch:  # Manual trigger

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  PROJECT_NAME: ${{ vars.PROJECT_NAME || 'goodmeal' }}

permissions:
  contents: read

jobs:
  discover-services:
    name: Discover Microservices
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.get-services.outputs.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Discover microservices
        id: get-services
        run: |
          # Find all directories in Backend/Microservices that contain Dockerfile (case insensitive)
          # Exclude SharedLibrary and ApiGateway
          services=()
          
          if [ -d "Backend/Microservices" ]; then
            for dir in Backend/Microservices/*/; do
              if [ -d "$dir" ]; then
                service_name=$(basename "$dir")
                # Skip SharedLibrary and ApiGateway (case insensitive)
                if [[ ! "$service_name" =~ ^(SharedLibrary|ApiGateway)$ ]] && [[ ! "$service_name" =~ ^(sharedlibrary|apigateway)$ ]]; then
                  # Check if Dockerfile exists (case insensitive)
                  if [ -f "${dir}Dockerfile" ] || [ -f "${dir}dockerfile" ] || [ -f "${dir}DockerFile" ]; then
                    services+=("$service_name")
                    echo "Found microservice: $service_name with Dockerfile"
                  else
                    echo "Skipping $service_name (no Dockerfile found)"
                  fi
                fi
              fi
            done
          fi
          
          # Ensure we have at least one service
          if [ ${#services[@]} -eq 0 ]; then
            echo "No microservices found with Dockerfiles"
            echo "services=[]" >> $GITHUB_OUTPUT
          else
            # Convert array to JSON format for matrix strategy (compact format)
            services_json=$(printf '%s\n' "${services[@]}" | jq -R . | jq -s -c .)
            echo "services=$services_json" >> $GITHUB_OUTPUT
            echo "Discovered services: $services_json"
          fi

  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: discover-services
    if: ${{ needs.discover-services.outputs.services != '[]' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.discover-services.outputs.services) }}
      fail-fast: false
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image tag
        id: set-tag
        run: |
          # Use commit SHA as image tag
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Create ECR repository if it doesn't exist
        run: |
          # Use PROJECT_NAME with fixed 'ecr' tag for repository naming
          REPO_NAME="${{ env.PROJECT_NAME }}-ecr"
          
          # Check if repository exists, create if it doesn't
          aws ecr describe-repositories --repository-names $REPO_NAME --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name $REPO_NAME --region ${{ env.AWS_REGION }}
          
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Build and push image to Amazon ECR with cache
        id: build-image
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.set-tag.outputs.IMAGE_TAG }}
        with:
          context: Backend/Microservices
          file: Backend/Microservices/${{ matrix.service }}/dockerfile
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-ecr:${{ matrix.service }}-${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-ecr:${{ matrix.service }}-latest
          cache-from: |
            type=gha,scope=${{ matrix.service }}
            type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-ecr:${{ matrix.service }}-cache
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.service }}
            type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-ecr:${{ matrix.service }}-cache,mode=max
          platforms: linux/amd64

      - name: Output build information
        run: |
          echo "✅ Successfully built and pushed ${{ matrix.service }}"
          echo "📦 Image: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-ecr:${{ matrix.service }}-${{ steps.set-tag.outputs.IMAGE_TAG }}"
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-ecr:${{ matrix.service }}-${{ steps.set-tag.outputs.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Output image details
        run: |
          echo "### 🚀 Build Summary for ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ env.PROJECT_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ env.PROJECT_NAME }}-ecr" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ steps.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [discover-services, build-and-push]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 📋 Microservices Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Discovered Services**: ${{ needs.discover-services.outputs.services }}" >> $GITHUB_STEP_SUMMARY
          echo "**AWS Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status**: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "✅ All microservices built and pushed successfully!" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-and-push.result }}" == "failure" ]; then
            echo "❌ Some microservices failed to build. Check the logs above." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Build completed with warnings or was skipped." >> $GITHUB_STEP_SUMMARY
          fi 