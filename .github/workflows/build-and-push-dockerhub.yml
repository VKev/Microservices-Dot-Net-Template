name: Build and Push Microservices to Docker Hub

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "GitHub Environment to use."
        type: string
        default: ghepxe-infrastructure
        required: true

env:
  PROJECT_NAME: ${{ vars.PROJECT_NAME || 'default' }}

permissions:
  contents: read

jobs:
  discover-services:
    name: Discover Microservices
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.get-services.outputs.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Discover microservices
        id: get-services
        run: |
          services=()
          BASE="Backend/Microservices"
          if [ -d "$BASE" ]; then
            for dir in "$BASE"/*/; do
              [ -d "$dir" ] || continue
              service_name=$(basename "$dir")
              if [[ ! "$service_name" =~ ^(SharedLibrary|sharedlibrary)$ ]]; then
                if [ -f "${dir}Dockerfile" ] || [ -f "${dir}dockerfile" ] || [ -f "${dir}DockerFile" ]; then
                  services+=("$service_name")
                  echo "Found microservice: $service_name with Dockerfile"
                else
                  echo "Skipping $service_name (no Dockerfile found)"
                fi
              fi
            done
          fi
          if [ ${#services[@]} -eq 0 ]; then
            echo "services=[]" >> "$GITHUB_OUTPUT"
          else
            services_json=$(printf '%s\n' "${services[@]}" | jq -R . | jq -s -c .)
            echo "services=$services_json" >> "$GITHUB_OUTPUT"
            echo "Discovered services: $services_json"
          fi

  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: discover-services
    if: ${{ needs.discover-services.outputs.services != '[]' }}
    environment:
      name: ${{ inputs.environment }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.discover-services.outputs.services) }}
      fail-fast: false
    env:
      PROJECT_NAME: ${{ vars.PROJECT_NAME || 'default' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Docker Hub namespace
        run: |
          if [ -z "$DOCKERHUB_USER" ]; then
            echo "DOCKERHUB_USERNAME secret is not set" >&2
            exit 1
          fi
          namespace_lower=$(echo "$DOCKERHUB_USER" | tr '[:upper:]' '[:lower:]')
          sanitized=$(echo "$namespace_lower" | sed -E 's/[^a-z0-9]+/-/g; s/^-+//; s/-+$//')
          if [ -z "$sanitized" ]; then
            echo "Failed to derive Docker Hub namespace from credentials" >&2
            exit 1
          fi
          echo "DOCKERHUB_NAMESPACE=$sanitized" >> "$GITHUB_ENV"
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}

      - name: Normalize names
        run: |
          original="${{ matrix.service }}"
          normalized=$(echo "$original" | tr '[:upper:]' '[:lower:]')
          sanitized=$(echo "$normalized" | sed -E 's/[^a-z0-9]+/-/g; s/^-+//; s/-+$//')
          if [ -z "$sanitized" ]; then
            echo "Failed to normalize service name '$original'" >&2
            exit 1
          fi
          project_original="${PROJECT_NAME:-default}"
          project_normalized=$(echo "$project_original" | tr '[:upper:]' '[:lower:]')
          project_sanitized=$(echo "$project_normalized" | sed -E 's/[^a-z0-9]+/-/g; s/^-+//; s/-+$//')
          if [ -z "$project_sanitized" ]; then
            echo "Failed to normalize project name '$project_original'" >&2
            exit 1
          fi
          echo "SERVICE_NAME_LOWER=$sanitized" >> "$GITHUB_ENV"
          echo "PROJECT_NAME_SLUG=$project_sanitized" >> "$GITHUB_ENV"
          echo "Normalized service name: $sanitized (from $original)"
          echo "Normalized project name: $project_sanitized (from $project_original)"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Resolve image tag
        id: set-tag
        run: echo "IMAGE_TAG=latest" >> "$GITHUB_OUTPUT"

      - name: Detect Dockerfile path
        id: dockerfile
        run: |
          BASE="Backend/Microservices/${{ matrix.service }}"
          for name in Dockerfile dockerfile DockerFile; do
            if [ -f "$BASE/$name" ]; then
              echo "path=$BASE/$name" >> "$GITHUB_OUTPUT"
              echo "Found Dockerfile at: $BASE/$name"
              exit 0
            fi
          done
          echo "No Dockerfile found under $BASE" >&2
          exit 1

      - name: Build and push image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: Backend/Microservices
          file: ${{ steps.dockerfile.outputs.path }}
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
          push: true
          tags: |
            ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.PROJECT_NAME_SLUG }}-${{ env.SERVICE_NAME_LOWER }}:latest
          cache-from: |
            type=gha,scope=${{ env.PROJECT_NAME_SLUG }}-${{ env.SERVICE_NAME_LOWER }}
          cache-to: |
            type=gha,mode=max,scope=${{ env.PROJECT_NAME_SLUG }}-${{ env.SERVICE_NAME_LOWER }}
          platforms: linux/amd64

      - name: Summarize build
        run: |
          echo "### Build Summary for ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Normalized Repository**: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.PROJECT_NAME_SLUG }}-${{ env.SERVICE_NAME_LOWER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: \`${{ steps.set-tag.outputs.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs:
      - discover-services
      - build-and-push
    if: always()
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Generate summary
        run: |
          echo "## Microservices Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Discovered Services**: ${{ needs.discover-services.outputs.services }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status**: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-and-push.result }}" = "success" ]; then
            echo "Docker Hub images were pushed using lower-case repositories with the \`latest\` tag." >> $GITHUB_STEP_SUMMARY
            echo "Ensure secrets \`DOCKERHUB_USERNAME\` and \`DOCKERHUB_TOKEN\` are configured with push permissions." >> $GITHUB_STEP_SUMMARY
          else
            echo "One or more builds failed. Check the job logs above for details." >> $GITHUB_STEP_SUMMARY
          fi



